#!/usr/bin/env python3

import os
import requests
from pyharnessworkshop import harness, utils

# REQUIRED VARIABLES LIST
HARNESS_ACCOUNT_ID = os.getenv("SE_WORKSHOP_ACCOUNT_ID")
HARNESS_ORG_ID = os.getenv("SE_WORKSHOP_ORG_ID")
HARNESS_PAT = os.getenv("SE_WORKSHOP_PAT")
HARNESS_PROJECT = utils.instruqt.get_agent_variable("HARNESS_PRJ_ID")
HARNESS_API = "https://app.harness.io"
CODE_REPO = utils.instruqt.get_agent_variable("HARNESS_REPO")

# Lab values
lab_id = "lab5"
default_pipeline_name = "Workshop Build and Deploy"
default_pipeline_id = "Workshop_Build_and_Deploy"
execution_notes = f"Automatically executed via Instruqt '{lab_id.title()}' Track Skip."

json_response = harness.platform.list_pipelines(HARNESS_PAT, HARNESS_ACCOUNT_ID, HARNESS_ORG_ID, HARNESS_PROJECT)
pipeline_data = harness.platform.get_pipeline_by_id(json_response, default_pipeline_id)

# Extract details or use default values
pipeline_name = pipeline_data.get("name", default_pipeline_name) if pipeline_data else default_pipeline_name
pipeline_id = pipeline_data.get("identifier", default_pipeline_id) if pipeline_data else default_pipeline_id

pipeline_context = {
    "pipeline_name": pipeline_name,
    "pipeline_id": pipeline_id,
    "project_id": HARNESS_PROJECT,
    "org_id": HARNESS_ORG_ID,
    "harness_repo": CODE_REPO
}

pipeline_yaml = utils.misc.render_template_from_url(pipeline_context, f"se-workshop-devsecops/assets/gar/yaml_spec/{lab_id}_pipeline.yaml.template")

if pipeline_data:
    print("Updating pipeline.")
    harness.platform.update_pipeline(HARNESS_PAT, HARNESS_ACCOUNT_ID, HARNESS_ORG_ID, HARNESS_PROJECT, pipeline_id, pipeline_yaml)
else:
    print("Pipeline not found. Creating a new pipeline.")
    harness.platform.create_harness_pipeline(HARNESS_PAT, HARNESS_ACCOUNT_ID, HARNESS_ORG_ID, HARNESS_PROJECT, pipeline_yaml)

# Create Policy
url = f"{HARNESS_API}/pm/api/v1/policies?accountIdentifier={HARNESS_ACCOUNT_ID}&orgIdentifier={HARNESS_ORG_ID}&projectIdentifier={HARNESS_PROJECT}"
headers = {
    "Content-Type": "application/json",
    "x-api-key": HARNESS_PAT
}
payload = {
    "identifier": "Production_Approval",
    "name": "Production Approval",
    "rego": "package pipeline\n\nrequired_steps = [\"HarnessApproval\"]\n\ndeny[msg] {\n    some prod_index\n    input.pipeline.stages[prod_index].stage.spec.infrastructure.environment.type == \"Production\"\n    not approval_before_prod(prod_index)\n    msg := sprintf(\"Deployment to higher environments require an approval stage. '%s' does not have an Approval stage\", [input.pipeline.stages[prod_index].stage.name])\n}\n\ndeny[msg] {\n    some prod_index\n    input.pipeline.stages[prod_index].stage.spec.infrastructure.environment.type == \"Production\"\n    stage = input.pipeline.stages[_].stage\n    stage.type == \"Approval\"\n    existing_steps := [s | s = stage.spec.execution.steps[_].step.type]\n    required_step := required_steps[_]\n    not contains(existing_steps, required_step)\n    msg := sprintf(\"Approval stage '%s' is missing required step '%s'\", [stage.name, required_step])\n}\n\napproval_before_prod(prod_index) {\n    some approval_index\n    approval_index < prod_index\n    input.pipeline.stages[approval_index].stage.type == \"Approval\"\n}\n\ncontains(arr, elem) {\n    arr[_] = elem\n}"
}
response = requests.post(url, headers=headers, json=payload)
response_code = response.status_code
if 200 <= response_code < 300:
    print("  INFO: Successfully created policy.")
else:
    print(f"  ERROR: Request failed. Status Code: {response_code}")
    print(f"  Response Content: {response.content.decode('utf-8')}")

# Create Policy Set
url = f"{HARNESS_API}/pm/api/v1/policysets?accountIdentifier={HARNESS_ACCOUNT_ID}&orgIdentifier={HARNESS_ORG_ID}&projectIdentifier={HARNESS_PROJECT}"
headers = {
    "Content-Type": "application/json",
    "x-api-key": HARNESS_PAT
}
payload = {
    "name": "Approval Required for Production Deployments",
    "identifier": "Approval_Required_for_Production_Deployments",
    "type": "pipeline",
    "action": "onsave",
    "description": f"Automatically created via Instruqt '{lab_id.title()}' Track Skip.",
    "enabled": False
}
response = requests.post(url, headers=headers, json=payload)
response_code = response.status_code
if 200 <= response_code < 300:
    print("  INFO: Successfully created policy set.")
else:
    print(f"  ERROR: Request failed. Status Code: {response_code}")
    print(f"  Response Content: {response.content.decode('utf-8')}")

# Associate Policy with Policy Set
url = f"{HARNESS_API}/pm/api/v1/policysets/Approval_Required_for_Production_Deployments?accountIdentifier={HARNESS_ACCOUNT_ID}&orgIdentifier={HARNESS_ORG_ID}&projectIdentifier={HARNESS_PROJECT}"
headers = {
    "Content-Type": "application/json",
    "x-api-key": HARNESS_PAT
}
payload = {
    "name": "Approval Required for Production Deployments",
    "identifier": "Approval_Required_for_Production_Deployments",
    "type": "pipeline",
    "action": "onsave",
    "description": f"Automatically created via Instruqt '{lab_id.title()}' Track Skip.",
    "enabled": True,
    "id": "Approval_Required_for_Production_Deployments",
    "policies": [
        {
            "identifier": "Production_Approval",
            "severity": "error"
        }
    ]
}
response = requests.patch(url, headers=headers, json=payload)
response_code = response.status_code
if 200 <= response_code < 300:
    print("  INFO: Successfully associated policy with policy set.")
else:
    print(f"  ERROR: Request failed. Status Code: {response_code}")
    print(f"  Response Content: {response.content.decode('utf-8')}")

# Execute pipeline
execution_yaml = f"""\
pipeline:
  identifier: {pipeline_id}
  properties:
    ci:
      codebase:
        build:
          spec:
            branch: main
          type: branch
"""

harness.platform.execute_pipeline(HARNESS_PAT, HARNESS_ACCOUNT_ID, HARNESS_ORG_ID, HARNESS_PROJECT, pipeline_id, execution_yaml, execution_notes)
