pipeline:
  name: {{ pipeline_name }}
  identifier: {{ pipeline_id }}
  projectIdentifier: {{ project_id }}
  orgIdentifier: {{ org_id }}
  tags: {}
  properties:
    ci:
      codebase:
        repoName: {{ harness_repo }}
        build: <+input>
  stages:
    - stage:
        name: Build
        identifier: Build
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Test
                  name: Test Intelligence
                  identifier: Test_Intelligence
                  spec:
                    shell: Sh
                    command: |-
                      cd ./python-tests
                      pytest
                    intelligenceMode: true
              - step:
                  name: Compile
                  identifier: Compile
                  template:
                    templateRef: Compile_Application
                    versionLabel: v0.1
              - parallel:
                  - step:
                      type: Owasp
                      name: OWASP
                      identifier: OWASP
                      spec:
                        mode: orchestration
                        config: default
                        target:
                          type: repository
                          detection: auto
                        advanced:
                          log:
                            level: info
                      when:
                        stageStatus: Success
                  - step:
                      type: OsvScanner
                      name: OSV Scan
                      identifier: OSV_Scan
                      spec:
                        mode: orchestration
                        config: default
                        target:
                          type: repository
                          detection: auto
                        advanced:
                          log:
                            level: info
                      when:
                        stageStatus: Success
              - step:
                  type: BuildAndPushGAR
                  name: Push to Google Artifact Registry
                  identifier: Push_to_Google_Artifact_Registry
                  spec:
                    connectorRef: org.workshopgar
                    host: us-docker.pkg.dev
                    projectID: seworkshop/seworkshop
                    imageName: harness-workshop
                    tags:
                      - <+variable.username>-<+pipeline.sequenceId>
                    caching: true
                    dockerfile: /harness/frontend-app/harness-webapp/Dockerfile
                    context: /harness/frontend-app/harness-webapp
              - parallel:
                  - step:
                      type: Background
                      name: dind
                      identifier: dind
                      spec:
                        connectorRef: org.workshopdocker
                        image: docker:dind
                        shell: Sh
                  - step:
                      type: AquaTrivy
                      name: Aqua Trivy
                      identifier: Aqua_Trivy
                      spec:
                        mode: orchestration
                        config: default
                        target:
                          type: container
                          detection: auto
                        advanced:
                          log:
                            level: info
                        privileged: true
                        image:
                          type: docker_v2
                          tag: <+variable.username>-<+pipeline.sequenceId>
                          name: seworkshop/seworkshop/harness-workshop
                          domain: us-docker.pkg.dev
                        sbom:
                          format: spdx-json
    - stage:
        name: Frontend - Deployment
        identifier: Frontend_Deployment
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: frontend
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: <+input>
                      sources: <+input>
          environment:
            environmentRef: dev
            deployToAll: false
            infrastructureDefinitions:
              - identifier: k8s_dev
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
              - step:
                  type: ServiceNowCreate
                  name: ServiceNow - Create Ticket
                  identifier: ServiceNow_Create_Ticket
                  spec:
                    connectorRef: ServiceNow
                    ticketType: change_request
                    fields:
                      - name: description
                        value: "Change Detail: Promote version <+variable.username>-<+pipeline.sequenceId> of <+service.name> to production."
                      - name: short_description
                        value: Begin promotion of <+service.name> to production
                    createType: Normal
                  timeout: 10m
              - step:
                  type: ServiceNowUpdate
                  name: ServiceNow - Update Ticket
                  identifier: ServiceNow_Update_Ticket
                  spec:
                    useServiceNowTemplate: false
                    connectorRef: ServiceNow
                    ticketType: change_request
                    ticketNumber: <+execution.steps.ServiceNow_Create_Ticket.ticket.ticketNumber>
                    fields:
                      - name: assignment_group
                        value: CAB Approval
                      - name: backout_plan
                        value: Harness Continuous Verification and Automatic Rollback.
                      - name: implementation_plan
                        value: |-
                          Harness Pipeline Deployment Details:
                            Deployed Artifact: <+artifacts.primary.image>
                            Harness Execution: <+pipeline.executionId>
                            Deployment URL: https://app.harness.io/ng/account/<+account.identifier>/all/orgs/<+org.identifier>/default/projects/<+project.identifier>/pipelines/<+pipeline.identifier>/executions/<+pipeline.executionId>/pipeline
                  timeout: 10m
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
    - stage:
        name: Approval
        identifier: Approval
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: ServiceNow Approval
                  identifier: ServiceNow_Approval
                  type: ServiceNowApproval
                  timeout: 1d
                  spec:
                    approvalCriteria:
                      type: KeyValues
                      spec:
                        matchAnyCondition: true
                        conditions:
                          - key: state
                            operator: equals
                            value: Implement
                    rejectionCriteria:
                      type: KeyValues
                      spec:
                        matchAnyCondition: true
                        conditions: []
                    connectorRef: ServiceNow
                    ticketNumber: <+pipeline.stages.Frontend_Deployment.spec.execution.steps.ServiceNow_Create_Ticket.ticket.ticketNumber>
                    retryInterval: 1m
                    ticketType: change_request
        tags: {}
    - parallel:
        - stage:
            name: Backend - Deployment
            identifier: Backend_Deployment
            description: ""
            type: Deployment
            spec:
              deploymentType: Kubernetes
              service:
                serviceRef: backend
                serviceInputs:
                  serviceDefinition:
                    type: Kubernetes
                    spec:
                      artifacts:
                        primary:
                          primaryArtifactRef: <+input>
                          sources: <+input>
              environment:
                useFromStage:
                  stage: Frontend_Deployment
              execution:
                steps:
                  - stepGroup:
                      name: Canary Deployment
                      identifier: canaryDeployment
                      steps:
                        - step:
                            name: Canary Deployment
                            identifier: canaryDeployment
                            type: K8sCanaryDeploy
                            timeout: 10m
                            spec:
                              instanceSelection:
                                type: Count
                                spec:
                                  count: 1
                              skipDryRun: false
                        - step:
                            name: Canary Delete
                            identifier: canaryDelete
                            type: K8sCanaryDelete
                            timeout: 10m
                            spec: {}
                  - stepGroup:
                      name: Primary Deployment
                      identifier: primaryDeployment
                      steps:
                        - step:
                            name: Rolling Deployment
                            identifier: rollingDeployment
                            type: K8sRollingDeploy
                            timeout: 10m
                            spec:
                              skipDryRun: false
                rollbackSteps:
                  - step:
                      name: Canary Delete
                      identifier: rollbackCanaryDelete
                      type: K8sCanaryDelete
                      timeout: 10m
                      spec: {}
                  - step:
                      name: Rolling Rollback
                      identifier: rollingRollback
                      type: K8sRollingRollback
                      timeout: 10m
                      spec: {}
            tags: {}
            failureStrategies:
              - onFailure:
                  errors:
                    - AllErrors
                  action:
                    type: StageRollback
        - stage:
            name: DAST Scans
            identifier: DAST_Scans
            template:
              templateRef: DAST_Scans
              versionLabel: "1.0"
