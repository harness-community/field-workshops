#!/usr/bin/env python3

# Standard library imports
import os
import time
import shutil
import subprocess

# Third-party imports
subprocess.run(["apt-get install -y -qq -o=Dpkg::Use-Pty=0 python3-pip > /dev/null"], check=True, shell=True)
subprocess.run([
    "pip",
    "install",
    "git+https://github.com/harness/pyharnessworkshop.git#egg=pyharnessworkshop"],
    stdout=subprocess.DEVNULL,
    check=True)
from pyharnessworkshop import harness, keycloak, utils  # noqa: E402
from kubernetes import config  # noqa: E402

######################## ADD ANY WORKSHOP SPECIFIC SETUP AT THE VERY BOTTOM ########################
WORKSHOP_TYPE = "chaos"
GENERATOR_URI = os.getenv("SE_WORKSHOP_GKE_GENERATOR")
GRAFANA_PW = os.getenv("SE_WORKSHOP_GRAFANA_PW")
################################## START OF DO NOT MODIFY SECTION ##################################

# REQUIRED VARIABLES LIST
HARNESS_ACCOUNT_ID = os.getenv("SE_WORKSHOP_ACCOUNT_ID")
HARNESS_ORG_ID = os.getenv("SE_WORKSHOP_ORG_ID")
HARNESS_PAT = os.getenv("SE_WORKSHOP_PAT")
HARNESS_USER_GROUP = os.getenv("SE_WORKSHOP_USER_GRP_ID")
USER_PWD = os.getenv("SE_WORKSHOP_USER_PWD")
KEYCLOAK_ENDPOINT = os.getenv("SE_WORKSHOP_KEYCLOAK_ENDPOINT")
KEYCLOAK_REALM = os.getenv("SE_WORKSHOP_KEYCLOAK_REALM")
KEYCLOAK_ADMIN_USER = os.getenv("SE_WORKSHOP_KEYCLOAK_ADMIN_USER")
KEYCLOAK_ADMIN_PWD = os.getenv("SE_WORKSHOP_KEYCLOAK_ADMIN_PWD")

print("We've only just begun...")

# Wait for Instruqt bootstrap to complete
while not os.path.isfile("/opt/instruqt/bootstrap/host-bootstrap-completed"):
    print("Waiting for Instruqt to finish booting the virtual machine")
    time.sleep(1)

# Create directories
os.makedirs('/opt/harness/scripts/py', exist_ok=True)
os.makedirs('/opt/harness/misc', exist_ok=True)

# Wait for the Kubernetes API server to become available
utils.k8s.wait_for_kubernetes_api("http://localhost:8001/api")

# Create Harness user on Instruqt workshop VM
utils.misc.run_command("useradd -m harness")

RANDOM_SUFFIX = utils.misc.generate_random_suffix()
HARNESS_PROJECT = f"{WORKSHOP_TYPE}{RANDOM_SUFFIX}"
USER_NAME = f"{WORKSHOP_TYPE}{RANDOM_SUFFIX}"
USER_EMAIL = f"{USER_NAME}@harness.io"

# Generate Keycloak Bearer Token
KEYCLOAK_TOKEN = keycloak.auth.generate_keycloak_token(KEYCLOAK_ENDPOINT, KEYCLOAK_ADMIN_USER, KEYCLOAK_ADMIN_PWD)
# Create workshop user in Keycloak Realm
keycloak.user.create_keycloak_user(KEYCLOAK_ENDPOINT, KEYCLOAK_REALM, KEYCLOAK_TOKEN, USER_EMAIL, USER_NAME, USER_PWD)

# Create a Sandbox Project for the User in Harness
harness.platform.create_harness_project(HARNESS_PAT, HARNESS_ACCOUNT_ID, HARNESS_ORG_ID, HARNESS_PROJECT)
HARNESS_PROJECT_CREATED = "true"

utils.instruqt.set_agent_variable("HARNESS_USER", USER_EMAIL)
utils.instruqt.set_agent_variable("HARNESS_PWD", USER_PWD)
utils.instruqt.set_agent_variable("HARNESS_PRJ_ID", HARNESS_PROJECT)
utils.instruqt.set_agent_variable("HARNESS_PRJ_CREATED", HARNESS_PROJECT_CREATED)
################################## END OF DO NOT MODIFY SECTION ##################################

############################# ADD ANY WORKSHOP SPECIFIC SETUP BELOW ##############################
utils.instruqt.set_agent_variable("HARNESS_USER_NAME", USER_NAME)
utils.instruqt.set_agent_variable("GRAFANA_PWD", GRAFANA_PW)
misc_path = "/opt/harness/misc"
manifest_path = f"{misc_path}/kubernetes-manifests"
utils.misc.run_command(f"mkdir -p {manifest_path}")

# Get assets for workshop
print("Cloning field-workshops repo...")
# ├── assets
# │     └── kubernetes-manifests
# └── se-workshop-ce
#       └── assets
#           └── boutique-app
utils.misc.run_command("git clone https://github.com/harness-community/field-workshops.git")
shutil.copytree("field-workshops/assets/kubernetes-manifests", f"{manifest_path}/", dirs_exist_ok=True)
shutil.copytree("field-workshops/se-workshop-ce/assets/boutique-app", f"{manifest_path}/", dirs_exist_ok=True)
shutil.rmtree("field-workshops")

# Get GKE K8s config and clean up K3s config
shutil.copy("/etc/rancher/k3s/k3s.yaml", f"{misc_path}/k3s.yaml")
os.remove("/root/.kube/config")
os.remove("/etc/rancher/k3s/k3s.yaml")
utils.misc.generate_gke_credentials(GENERATOR_URI, USER_NAME, f"{misc_path}/gke.yaml")
os.environ["KUBECONFIG"] = f"{misc_path}/k3s.yaml:{misc_path}/gke.yaml"
utils.misc.run_command("kubectl config view --merge --flatten > /root/.kube/config")
os.environ["KUBECONFIG"] = "/root/.kube/config"

print("Deploying Boutique app...")
contexts, active_context = config.list_kube_config_contexts()
gke_context = next(ctx for ctx in contexts if ctx['name'].startswith('chaos'))['name']
config.load_kube_config(context=gke_context)
utils.k8s.create_k8s_secret("grafana-admin", GRAFANA_PW, USER_NAME)
utils.k8s.apply_k8s_manifests([
    f"{manifest_path}/workshop_app.yaml",
    f"{manifest_path}/workshop_prometheus.yaml",
    f"{manifest_path}/workshop_grafana.yaml"
], USER_NAME)
boutique_ip = utils.k8s.get_k8s_loadbalancer_ip("frontend-external", USER_NAME)
grafana_ip = utils.k8s.get_k8s_loadbalancer_ip("grafana", USER_NAME)
print("  DEBUG: External IP Addresses:")
print(f"                      Boutique: {boutique_ip}")
print(f"                       Grafana: {grafana_ip}")
utils.instruqt.set_agent_variable("HARNESS_BOUTIQUE_URL", f"http://{boutique_ip}")

# Setup nginx to redirect instruqt tabs
config.load_kube_config(context="default")
print("Deploying nginx on sandbox k3s...")
assignment_service_tabs = f"boutique:30001:{boutique_ip},grafana:30002:{grafana_ip}"
utils.k8s.render_manifest_from_template(f"{manifest_path}/nginx.yaml.template", manifest_path, assignment_service_tabs)
utils.k8s.apply_k8s_manifests([
    f"{manifest_path}/nginx-boutique.yaml",
    f"{manifest_path}/nginx-grafana.yaml"
])

# Delete default context (k3s) as it's not necessary for the workshop
utils.misc.run_command(f"kubectl config use-context {gke_context}")
utils.misc.run_command("kubectl config delete-context default")
