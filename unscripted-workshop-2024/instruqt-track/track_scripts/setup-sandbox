#!/usr/bin/env python3

# Standard library imports
import os
import time
import shutil

# Third-party imports
from pyharnessworkshop import harness, keycloak, utils

######################## ADD ANY WORKSHOP SPECIFIC SETUP AT THE VERY BOTTOM ########################
WORKSHOP_TYPE = "unscripted"
WORKSHOP_REPO = "harness-community/unscripted-workshop-2024"
################################## START OF DO NOT MODIFY SECTION ##################################

# REQUIRED VARIABLES LIST
HARNESS_ACCOUNT_ID = os.getenv("SE_WORKSHOP_ACCOUNT_ID")
HARNESS_ORG_ID = os.getenv("SE_WORKSHOP_ORG_ID")
HARNESS_PAT = os.getenv("SE_WORKSHOP_PAT")
HARNESS_USER_GROUP = os.getenv("SE_WORKSHOP_USER_GRP_ID")
USER_PWD = os.getenv("SE_WORKSHOP_USER_PWD")
KEYCLOAK_ENDPOINT = os.getenv("SE_WORKSHOP_KEYCLOAK_ENDPOINT")
KEYCLOAK_REALM = os.getenv("SE_WORKSHOP_KEYCLOAK_REALM")
KEYCLOAK_ADMIN_USER = os.getenv("SE_WORKSHOP_KEYCLOAK_ADMIN_USER")
KEYCLOAK_ADMIN_PWD = os.getenv("SE_WORKSHOP_KEYCLOAK_ADMIN_PWD")

print("We've only just begun...")

# Wait for Instruqt bootstrap to complete
while not os.path.isfile("/opt/instruqt/bootstrap/host-bootstrap-completed"):
    print("Waiting for Instruqt to finish booting the virtual machine")
    time.sleep(1)

# Wait for the Kubernetes API server to become available
utils.k8s.wait_for_kubernetes_api("http://localhost:8001/api")

random_suffix = utils.misc.generate_random_suffix()
harness_project = f"{WORKSHOP_TYPE}{random_suffix}"
user_name = f"{WORKSHOP_TYPE}{random_suffix}"
user_email = f"{user_name}@harness.io"

# Generate Keycloak Bearer Token
keycloak_token = keycloak.auth.generate_keycloak_token(KEYCLOAK_ENDPOINT, KEYCLOAK_ADMIN_USER, KEYCLOAK_ADMIN_PWD)
# Create workshop user in Keycloak Realm
keycloak.user.create_keycloak_user(KEYCLOAK_ENDPOINT, KEYCLOAK_REALM, keycloak_token, user_email, user_name, USER_PWD)

# Create a Sandbox Project for the User in Harness
harness.platform.create_harness_project(HARNESS_PAT, HARNESS_ACCOUNT_ID, HARNESS_ORG_ID, harness_project)
harness_project_created = "true"

# Add the workshop user to the Harness project as an admin
harness.platform.invite_user_to_harness_project_loop(HARNESS_PAT, HARNESS_ACCOUNT_ID, HARNESS_ORG_ID, harness_project, user_email)

# Install delegate
template_path = "assets/kubernetes-manifests/harness-delegate.yaml.template"
utils.misc.fetch_template_from_url(template_path, "/opt/harness/harness-delegate.yaml.template")
harness.platform.deploy_harness_delegate(
    HARNESS_PAT, HARNESS_ACCOUNT_ID, HARNESS_ORG_ID, harness_project,
    "/opt/harness/harness-delegate.yaml.template", f"{harness_project}-delegate"
)

utils.instruqt.set_agent_variable("HARNESS_USER", user_email)
utils.instruqt.set_agent_variable("HARNESS_PWD", USER_PWD)
utils.instruqt.set_agent_variable("HARNESS_PRJ_ID", harness_project)
utils.instruqt.set_agent_variable("HARNESS_PRJ_CREATED", harness_project_created)
################################## END OF DO NOT MODIFY SECTION ##################################

############################# ADD ANY WORKSHOP SPECIFIC SETUP BELOW ##############################
harness_path = "/opt/harness"
workshop_path = "/opt/workshop"
os.makedirs(f"{workshop_path}/harnessrepo", exist_ok=True)
os.makedirs('/opt/harness/terraform', exist_ok=True)
os.makedirs('/root/notes', exist_ok=True)
utils.misc.run_command("touch /root/notes/scratch.txt")

# Get assets for workshop
print("Cloning field-workshops repo...")
utils.misc.run_command("git clone https://github.com/harness-community/field-workshops.git")
shutil.copytree("field-workshops/unscripted-workshop-2024/assets/terraform/", f"{harness_path}/terraform", dirs_exist_ok=True)
shutil.copytree("field-workshops/unscripted-workshop-2024/assets/yaml_spec/", f"{harness_path}/misc", dirs_exist_ok=True)
shutil.copy("field-workshops/unscripted-workshop-2024/assets/scripts/update_netrc.sh", f"{workshop_path}/script.sh")
shutil.rmtree("field-workshops")

# Provision resources
instruqt_sandbox_id = os.getenv("INSTRUQT_PARTICIPANT_ID")
utils.misc.run_command(f"tofu -chdir={harness_path}/terraform init > {harness_path}/misc/tofu_init.log 2>&1")
tfvars_file_content = f"""\
// Platform
account_id = "{HARNESS_ACCOUNT_ID}"
org_id     = "{HARNESS_ORG_ID}"
project_id = "{harness_project}"
api_key    = "{HARNESS_PAT}"

// Repo
new_repo_id          = "harnessrepo"
github_repo_to_clone = "{WORKSHOP_REPO}"

// Connector
delegate_selector = "{harness_project}-delegate"

// Harness Variables
instruqt_sandbox_id = "{instruqt_sandbox_id}"
"""
with open(f"{harness_path}/terraform/terraform.tfvars", "w") as tfvars_file:
    tfvars_file.write(tfvars_file_content)
utils.misc.run_command(f"nohup tofu -chdir={harness_path}/terraform apply -auto-approve > {harness_path}/misc/tofu_apply.log 2>&1 &")

# Install prometheus
utils.misc.run_command("kubectl create namespace monitoring")
utils.misc.run_command(f"kubectl -n monitoring apply -f {harness_path}/misc/workshop_prometheus.yaml")

# Install VS Code
utils.misc.setup_vs_code(8443, f"{workshop_path}/harnessrepo")
utils.misc.run_command(f"set-workdir {workshop_path}")
