#!/usr/bin/env python3

import os
import base64
import requests
import subprocess

# Workshop Variables
instruqt_sandbox_id = os.getenv("INSTRUQT_PARTICIPANT_ID")
metadata_url = "http://metadata.google.internal/computeMetadata/v1/instance/attributes"
cert_path = "/etc/ssl/certs/sandbox.crt"
key_path = "/etc/ssl/private/sandbox.key"
headers = {"Metadata-Flavor": "Google"}

# Download the cert and key
response = requests.get(f"{metadata_url}/ssl-certificate", headers=headers)
with open(cert_path, "wb") as file:
    file.write(response.content)

response = requests.get(f"{metadata_url}/ssl-certificate-key", headers=headers)
with open(key_path, "wb") as file:
    file.write(response.content)

# Encode the cert and key
with open(cert_path, "rb") as file:
    cert_base64 = base64.b64encode(file.read()).decode('utf-8')

with open(key_path, "rb") as file:
    key_base64 = base64.b64encode(file.read()).decode('utf-8')

secret_yaml = f"""
apiVersion: v1
kind: Secret
metadata:
  name: sandbox-cert
data:
  tls.crt: {cert_base64}
  tls.key: {key_base64}
type: kubernetes.io/tls
"""

subprocess.run(["kubectl", "apply", "-f", "-"], input=secret_yaml.encode())

ingress_yaml = f"""
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - backend.sandbox.{instruqt_sandbox_id}.instruqt.io
    secretName: sandbox-cert
  rules:
  - host: backend.sandbox.{instruqt_sandbox_id}.instruqt.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web-backend-svc
            port:
              number: 8081
"""

subprocess.run(["kubectl", "apply", "-f", "-"], input=ingress_yaml.encode())
